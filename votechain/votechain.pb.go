// Code generated by protoc-gen-go.
// source: votechain.proto
// DO NOT EDIT!

/*
Package votechain is a generated protocol buffer package.

It is generated from these files:
	votechain.proto

It has these top-level messages:
	Empty
	Vote
	Result
	Block
	BlockNumber
	Coordination
*/
package votechain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Vote struct {
	VoterProof string `protobuf:"bytes,1,opt,name=voter_proof,json=voterProof" json:"voter_proof,omitempty"`
	RaceId     int32  `protobuf:"varint,2,opt,name=race_id,json=raceId" json:"race_id,omitempty"`
	Selection  string `protobuf:"bytes,3,opt,name=selection" json:"selection,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Vote) GetVoterProof() string {
	if m != nil {
		return m.VoterProof
	}
	return ""
}

func (m *Vote) GetRaceId() int32 {
	if m != nil {
		return m.RaceId
	}
	return 0
}

func (m *Vote) GetSelection() string {
	if m != nil {
		return m.Selection
	}
	return ""
}

type Result struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Block struct {
	Number   int32   `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Parent   string  `protobuf:"bytes,2,opt,name=parent" json:"parent,omitempty"`
	Nonce    int32   `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
	Capacity int32   `protobuf:"varint,4,opt,name=capacity" json:"capacity,omitempty"`
	Votes    []*Vote `protobuf:"bytes,5,rep,name=votes" json:"votes,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Block) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Block) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Block) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Block) GetVotes() []*Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

type BlockNumber struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *BlockNumber) Reset()                    { *m = BlockNumber{} }
func (m *BlockNumber) String() string            { return proto.CompactTextString(m) }
func (*BlockNumber) ProtoMessage()               {}
func (*BlockNumber) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BlockNumber) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type Coordination struct {
	// Types that are valid to be assigned to Transaction:
	//	*Coordination_Block
	//	*Coordination_Vote
	Transaction isCoordination_Transaction `protobuf_oneof:"transaction"`
}

func (m *Coordination) Reset()                    { *m = Coordination{} }
func (m *Coordination) String() string            { return proto.CompactTextString(m) }
func (*Coordination) ProtoMessage()               {}
func (*Coordination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isCoordination_Transaction interface {
	isCoordination_Transaction()
}

type Coordination_Block struct {
	Block *Block `protobuf:"bytes,1,opt,name=block,oneof"`
}
type Coordination_Vote struct {
	Vote *Vote `protobuf:"bytes,2,opt,name=vote,oneof"`
}

func (*Coordination_Block) isCoordination_Transaction() {}
func (*Coordination_Vote) isCoordination_Transaction()  {}

func (m *Coordination) GetTransaction() isCoordination_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *Coordination) GetBlock() *Block {
	if x, ok := m.GetTransaction().(*Coordination_Block); ok {
		return x.Block
	}
	return nil
}

func (m *Coordination) GetVote() *Vote {
	if x, ok := m.GetTransaction().(*Coordination_Vote); ok {
		return x.Vote
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Coordination) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Coordination_OneofMarshaler, _Coordination_OneofUnmarshaler, _Coordination_OneofSizer, []interface{}{
		(*Coordination_Block)(nil),
		(*Coordination_Vote)(nil),
	}
}

func _Coordination_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Coordination)
	// transaction
	switch x := m.Transaction.(type) {
	case *Coordination_Block:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *Coordination_Vote:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vote); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Coordination.Transaction has unexpected type %T", x)
	}
	return nil
}

func _Coordination_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Coordination)
	switch tag {
	case 1: // transaction.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Transaction = &Coordination_Block{msg}
		return true, err
	case 2: // transaction.vote
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Vote)
		err := b.DecodeMessage(msg)
		m.Transaction = &Coordination_Vote{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Coordination_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Coordination)
	// transaction
	switch x := m.Transaction.(type) {
	case *Coordination_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Coordination_Vote:
		s := proto.Size(x.Vote)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Empty)(nil), "votechain.Empty")
	proto.RegisterType((*Vote)(nil), "votechain.Vote")
	proto.RegisterType((*Result)(nil), "votechain.Result")
	proto.RegisterType((*Block)(nil), "votechain.Block")
	proto.RegisterType((*BlockNumber)(nil), "votechain.BlockNumber")
	proto.RegisterType((*Coordination)(nil), "votechain.Coordination")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PollingStation service

type PollingStationClient interface {
	Cast(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*Result, error)
	GetLatestBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Block, error)
	GetBlock(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*Block, error)
	Coordinate(ctx context.Context, opts ...grpc.CallOption) (PollingStation_CoordinateClient, error)
}

type pollingStationClient struct {
	cc *grpc.ClientConn
}

func NewPollingStationClient(cc *grpc.ClientConn) PollingStationClient {
	return &pollingStationClient{cc}
}

func (c *pollingStationClient) Cast(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/votechain.PollingStation/Cast", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollingStationClient) GetLatestBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/votechain.PollingStation/GetLatestBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollingStationClient) GetBlock(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/votechain.PollingStation/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollingStationClient) Coordinate(ctx context.Context, opts ...grpc.CallOption) (PollingStation_CoordinateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PollingStation_serviceDesc.Streams[0], c.cc, "/votechain.PollingStation/Coordinate", opts...)
	if err != nil {
		return nil, err
	}
	x := &pollingStationCoordinateClient{stream}
	return x, nil
}

type PollingStation_CoordinateClient interface {
	Send(*Coordination) error
	Recv() (*Coordination, error)
	grpc.ClientStream
}

type pollingStationCoordinateClient struct {
	grpc.ClientStream
}

func (x *pollingStationCoordinateClient) Send(m *Coordination) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pollingStationCoordinateClient) Recv() (*Coordination, error) {
	m := new(Coordination)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PollingStation service

type PollingStationServer interface {
	Cast(context.Context, *Vote) (*Result, error)
	GetLatestBlock(context.Context, *Empty) (*Block, error)
	GetBlock(context.Context, *BlockNumber) (*Block, error)
	Coordinate(PollingStation_CoordinateServer) error
}

func RegisterPollingStationServer(s *grpc.Server, srv PollingStationServer) {
	s.RegisterService(&_PollingStation_serviceDesc, srv)
}

func _PollingStation_Cast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollingStationServer).Cast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votechain.PollingStation/Cast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollingStationServer).Cast(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollingStation_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollingStationServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votechain.PollingStation/GetLatestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollingStationServer).GetLatestBlock(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollingStation_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollingStationServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votechain.PollingStation/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollingStationServer).GetBlock(ctx, req.(*BlockNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollingStation_Coordinate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PollingStationServer).Coordinate(&pollingStationCoordinateServer{stream})
}

type PollingStation_CoordinateServer interface {
	Send(*Coordination) error
	Recv() (*Coordination, error)
	grpc.ServerStream
}

type pollingStationCoordinateServer struct {
	grpc.ServerStream
}

func (x *pollingStationCoordinateServer) Send(m *Coordination) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pollingStationCoordinateServer) Recv() (*Coordination, error) {
	m := new(Coordination)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PollingStation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "votechain.PollingStation",
	HandlerType: (*PollingStationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cast",
			Handler:    _PollingStation_Cast_Handler,
		},
		{
			MethodName: "GetLatestBlock",
			Handler:    _PollingStation_GetLatestBlock_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _PollingStation_GetBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Coordinate",
			Handler:       _PollingStation_Coordinate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "votechain.proto",
}

// Client API for ChainNode service

type ChainNodeClient interface {
}

type chainNodeClient struct {
	cc *grpc.ClientConn
}

func NewChainNodeClient(cc *grpc.ClientConn) ChainNodeClient {
	return &chainNodeClient{cc}
}

// Server API for ChainNode service

type ChainNodeServer interface {
}

func RegisterChainNodeServer(s *grpc.Server, srv ChainNodeServer) {
	s.RegisterService(&_ChainNode_serviceDesc, srv)
}

var _ChainNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "votechain.ChainNode",
	HandlerType: (*ChainNodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "votechain.proto",
}

func init() { proto.RegisterFile("votechain.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x52, 0xd1, 0x6a, 0x14, 0x31,
	0x14, 0xdd, 0xb1, 0x9b, 0xdd, 0x9d, 0x3b, 0xda, 0x6a, 0x90, 0x76, 0x58, 0x04, 0x97, 0xc0, 0xc2,
	0x3c, 0x48, 0x91, 0x15, 0x7c, 0xf2, 0xa9, 0xab, 0xb4, 0x82, 0x94, 0x12, 0xc1, 0x47, 0x4b, 0x36,
	0x73, 0xad, 0x83, 0xb3, 0xc9, 0x90, 0x64, 0x85, 0xfe, 0x85, 0x1f, 0xeb, 0x07, 0x48, 0xee, 0x4c,
	0xa7, 0x43, 0xbb, 0x3e, 0x9e, 0x73, 0xee, 0xb9, 0x39, 0x39, 0x09, 0x1c, 0xfd, 0xb6, 0x01, 0xf5,
	0x4f, 0x55, 0x99, 0xd3, 0xc6, 0xd9, 0x60, 0x79, 0xda, 0x13, 0x62, 0x0a, 0xec, 0xd3, 0xb6, 0x09,
	0xb7, 0xe2, 0x3b, 0x8c, 0xbf, 0xd9, 0x80, 0xfc, 0x35, 0x64, 0x51, 0x75, 0xd7, 0x8d, 0xb3, 0xf6,
	0x47, 0x9e, 0x2c, 0x92, 0x22, 0x95, 0x40, 0xd4, 0x55, 0x64, 0xf8, 0x09, 0x4c, 0x9d, 0xd2, 0x78,
	0x5d, 0x95, 0xf9, 0x93, 0x45, 0x52, 0x30, 0x39, 0x89, 0xf0, 0x73, 0xc9, 0x5f, 0x41, 0xea, 0xb1,
	0x46, 0x1d, 0x2a, 0x6b, 0xf2, 0x03, 0xf2, 0xdd, 0x13, 0xe2, 0x03, 0x4c, 0x24, 0xfa, 0x5d, 0x1d,
	0x78, 0x0e, 0x53, 0xbf, 0xd3, 0x1a, 0xbd, 0xa7, 0xed, 0x33, 0x79, 0x07, 0xa3, 0xb2, 0x45, 0xef,
	0xd5, 0x0d, 0xd2, 0xea, 0x54, 0xde, 0x41, 0xf1, 0x27, 0x01, 0x76, 0x56, 0x5b, 0xfd, 0x8b, 0x1f,
	0xc3, 0xc4, 0xec, 0xb6, 0x1b, 0x74, 0x64, 0x66, 0xb2, 0x43, 0x91, 0x6f, 0x94, 0x43, 0x13, 0x3a,
	0x6b, 0x87, 0xf8, 0x4b, 0x60, 0xc6, 0x1a, 0x8d, 0x94, 0x88, 0xc9, 0x16, 0xf0, 0x39, 0xcc, 0xb4,
	0x6a, 0x94, 0xae, 0xc2, 0x6d, 0x3e, 0x26, 0xa1, 0xc7, 0x7c, 0x09, 0x2c, 0x5e, 0xd7, 0xe7, 0x6c,
	0x71, 0x50, 0x64, 0xab, 0xa3, 0xd3, 0xfb, 0xfa, 0x62, 0x43, 0xb2, 0x55, 0xc5, 0x12, 0x32, 0x4a,
	0x74, 0xd9, 0x9f, 0xbf, 0x2f, 0x97, 0x30, 0xf0, 0x74, 0x6d, 0xad, 0x2b, 0x2b, 0xa3, 0x62, 0x0f,
	0xbc, 0x00, 0xb6, 0x89, 0x36, 0x1a, 0xcb, 0x56, 0xcf, 0x07, 0xdb, 0x69, 0xdd, 0xc5, 0x48, 0xb6,
	0x03, 0x7c, 0x09, 0xe3, 0xa8, 0xd1, 0x7d, 0x1e, 0xc7, 0xb8, 0x18, 0x49, 0x92, 0xcf, 0x9e, 0x41,
	0x16, 0x9c, 0x32, 0x5e, 0x51, 0xcf, 0xab, 0xbf, 0x09, 0x1c, 0x5e, 0xd9, 0xba, 0xae, 0xcc, 0xcd,
	0xd7, 0xd0, 0x1e, 0xf9, 0x06, 0xc6, 0x6b, 0xe5, 0x03, 0x7f, 0xb8, 0x62, 0xfe, 0x62, 0x40, 0xb4,
	0x8f, 0x23, 0x46, 0xfc, 0x3d, 0x1c, 0x9e, 0x63, 0xf8, 0xa2, 0x02, 0xfa, 0xd0, 0x56, 0x3e, 0xcc,
	0x48, 0x9f, 0x65, 0xfe, 0x28, 0x35, 0xf9, 0x66, 0xe7, 0xd8, 0x39, 0x8e, 0x1f, 0xea, 0x6d, 0x49,
	0x7b, 0x7d, 0x1f, 0x01, 0xfa, 0x82, 0x90, 0x9f, 0x0c, 0x26, 0x86, 0xbd, 0xcd, 0xff, 0x27, 0x88,
	0x51, 0x91, 0xbc, 0x4d, 0x56, 0x19, 0xa4, 0xeb, 0xa8, 0x5d, 0xda, 0x12, 0x37, 0x13, 0xfa, 0xe6,
	0xef, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xed, 0x0c, 0xb0, 0xf9, 0x02, 0x00, 0x00,
}
