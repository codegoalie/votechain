// Code generated by protoc-gen-go.
// source: votechain.proto
// DO NOT EDIT!

/*
Package votechain is a generated protocol buffer package.

It is generated from these files:
	votechain.proto

It has these top-level messages:
	Empty
	Vote
	Result
	Block
	BlockNumber
*/
package votechain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Vote struct {
	VoterProof string `protobuf:"bytes,1,opt,name=voter_proof,json=voterProof" json:"voter_proof,omitempty"`
	RaceId     int32  `protobuf:"varint,2,opt,name=race_id,json=raceId" json:"race_id,omitempty"`
	Selection  string `protobuf:"bytes,3,opt,name=selection" json:"selection,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Vote) GetVoterProof() string {
	if m != nil {
		return m.VoterProof
	}
	return ""
}

func (m *Vote) GetRaceId() int32 {
	if m != nil {
		return m.RaceId
	}
	return 0
}

func (m *Vote) GetSelection() string {
	if m != nil {
		return m.Selection
	}
	return ""
}

type Result struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Block struct {
	Number   int32   `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Parent   string  `protobuf:"bytes,2,opt,name=parent" json:"parent,omitempty"`
	Nonce    int32   `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
	Capacity int32   `protobuf:"varint,4,opt,name=capacity" json:"capacity,omitempty"`
	Votes    []*Vote `protobuf:"bytes,5,rep,name=votes" json:"votes,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Block) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Block) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Block) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Block) GetVotes() []*Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

type BlockNumber struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *BlockNumber) Reset()                    { *m = BlockNumber{} }
func (m *BlockNumber) String() string            { return proto.CompactTextString(m) }
func (*BlockNumber) ProtoMessage()               {}
func (*BlockNumber) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BlockNumber) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "votechain.Empty")
	proto.RegisterType((*Vote)(nil), "votechain.Vote")
	proto.RegisterType((*Result)(nil), "votechain.Result")
	proto.RegisterType((*Block)(nil), "votechain.Block")
	proto.RegisterType((*BlockNumber)(nil), "votechain.BlockNumber")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PollingStation service

type PollingStationClient interface {
	Cast(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*Result, error)
}

type pollingStationClient struct {
	cc *grpc.ClientConn
}

func NewPollingStationClient(cc *grpc.ClientConn) PollingStationClient {
	return &pollingStationClient{cc}
}

func (c *pollingStationClient) Cast(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/votechain.PollingStation/Cast", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PollingStation service

type PollingStationServer interface {
	Cast(context.Context, *Vote) (*Result, error)
}

func RegisterPollingStationServer(s *grpc.Server, srv PollingStationServer) {
	s.RegisterService(&_PollingStation_serviceDesc, srv)
}

func _PollingStation_Cast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollingStationServer).Cast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votechain.PollingStation/Cast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollingStationServer).Cast(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

var _PollingStation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "votechain.PollingStation",
	HandlerType: (*PollingStationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cast",
			Handler:    _PollingStation_Cast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "votechain.proto",
}

// Client API for ChainNode service

type ChainNodeClient interface {
	GetLatestBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Block, error)
	GetBlock(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*Block, error)
	Coordinate(ctx context.Context, opts ...grpc.CallOption) (ChainNode_CoordinateClient, error)
}

type chainNodeClient struct {
	cc *grpc.ClientConn
}

func NewChainNodeClient(cc *grpc.ClientConn) ChainNodeClient {
	return &chainNodeClient{cc}
}

func (c *chainNodeClient) GetLatestBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/votechain.ChainNode/GetLatestBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainNodeClient) GetBlock(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/votechain.ChainNode/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainNodeClient) Coordinate(ctx context.Context, opts ...grpc.CallOption) (ChainNode_CoordinateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChainNode_serviceDesc.Streams[0], c.cc, "/votechain.ChainNode/Coordinate", opts...)
	if err != nil {
		return nil, err
	}
	x := &chainNodeCoordinateClient{stream}
	return x, nil
}

type ChainNode_CoordinateClient interface {
	Send(*Block) error
	Recv() (*Block, error)
	grpc.ClientStream
}

type chainNodeCoordinateClient struct {
	grpc.ClientStream
}

func (x *chainNodeCoordinateClient) Send(m *Block) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chainNodeCoordinateClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ChainNode service

type ChainNodeServer interface {
	GetLatestBlock(context.Context, *Empty) (*Block, error)
	GetBlock(context.Context, *BlockNumber) (*Block, error)
	Coordinate(ChainNode_CoordinateServer) error
}

func RegisterChainNodeServer(s *grpc.Server, srv ChainNodeServer) {
	s.RegisterService(&_ChainNode_serviceDesc, srv)
}

func _ChainNode_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainNodeServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votechain.ChainNode/GetLatestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainNodeServer).GetLatestBlock(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainNode_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainNodeServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votechain.ChainNode/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainNodeServer).GetBlock(ctx, req.(*BlockNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainNode_Coordinate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChainNodeServer).Coordinate(&chainNodeCoordinateServer{stream})
}

type ChainNode_CoordinateServer interface {
	Send(*Block) error
	Recv() (*Block, error)
	grpc.ServerStream
}

type chainNodeCoordinateServer struct {
	grpc.ServerStream
}

func (x *chainNodeCoordinateServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chainNodeCoordinateServer) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChainNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "votechain.ChainNode",
	HandlerType: (*ChainNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestBlock",
			Handler:    _ChainNode_GetLatestBlock_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _ChainNode_GetBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Coordinate",
			Handler:       _ChainNode_Coordinate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "votechain.proto",
}

func init() { proto.RegisterFile("votechain.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0x5f, 0x6b, 0xe2, 0x40,
	0x14, 0xc5, 0xcd, 0xea, 0x44, 0x73, 0x05, 0xdd, 0x1d, 0x16, 0x37, 0xc8, 0xc2, 0x4a, 0x40, 0xc8,
	0xc3, 0x22, 0x8b, 0x0b, 0x3e, 0x2d, 0xfb, 0x50, 0x29, 0x52, 0x28, 0x22, 0x53, 0xe8, 0x63, 0x65,
	0x9c, 0xdc, 0xda, 0xd0, 0x38, 0x13, 0x32, 0x63, 0xc1, 0x6f, 0xd1, 0xef, 0xd2, 0x2f, 0x58, 0x66,
	0x12, 0xff, 0x60, 0xed, 0xe3, 0xf9, 0x9d, 0x39, 0x37, 0x77, 0x4e, 0x06, 0xba, 0x2f, 0xca, 0xa0,
	0x78, 0xe2, 0xa9, 0x1c, 0xe5, 0x85, 0x32, 0x8a, 0x06, 0x07, 0x10, 0x35, 0x81, 0x5c, 0x6f, 0x72,
	0xb3, 0x8b, 0x1e, 0xa0, 0x71, 0xaf, 0x0c, 0xd2, 0x5f, 0xd0, 0xb6, 0x6e, 0xb1, 0xcc, 0x0b, 0xa5,
	0x1e, 0x43, 0x6f, 0xe0, 0xc5, 0x01, 0x03, 0x87, 0x16, 0x96, 0xd0, 0x1f, 0xd0, 0x2c, 0xb8, 0xc0,
	0x65, 0x9a, 0x84, 0x5f, 0x06, 0x5e, 0x4c, 0x98, 0x6f, 0xe5, 0x4d, 0x42, 0x7f, 0x42, 0xa0, 0x31,
	0x43, 0x61, 0x52, 0x25, 0xc3, 0xba, 0xcb, 0x1d, 0x41, 0xf4, 0x0f, 0x7c, 0x86, 0x7a, 0x9b, 0x19,
	0x1a, 0x42, 0x53, 0x6f, 0x85, 0x40, 0xad, 0xdd, 0xf4, 0x16, 0xdb, 0x4b, 0xeb, 0x6c, 0x50, 0x6b,
	0xbe, 0x46, 0x37, 0x3a, 0x60, 0x7b, 0x19, 0xbd, 0x7a, 0x40, 0xae, 0x32, 0x25, 0x9e, 0x69, 0x0f,
	0x7c, 0xb9, 0xdd, 0xac, 0xb0, 0x70, 0x61, 0xc2, 0x2a, 0x65, 0x79, 0xce, 0x0b, 0x94, 0xa6, 0x8a,
	0x56, 0x8a, 0x7e, 0x07, 0x22, 0x95, 0x14, 0xe8, 0x36, 0x22, 0xac, 0x14, 0xb4, 0x0f, 0x2d, 0xc1,
	0x73, 0x2e, 0x52, 0xb3, 0x0b, 0x1b, 0xce, 0x38, 0x68, 0x3a, 0x04, 0x62, 0xaf, 0xab, 0x43, 0x32,
	0xa8, 0xc7, 0xed, 0x71, 0x77, 0x74, 0xac, 0xcf, 0x36, 0xc4, 0x4a, 0x37, 0x1a, 0x42, 0xdb, 0x6d,
	0x34, 0x3f, 0x7c, 0xff, 0xd2, 0x5e, 0xe3, 0xff, 0xd0, 0x59, 0xa8, 0x2c, 0x4b, 0xe5, 0xfa, 0xce,
	0x70, 0xdb, 0x04, 0xfd, 0x0d, 0x8d, 0x29, 0xd7, 0x86, 0x9e, 0x0f, 0xee, 0x7f, 0x3b, 0x01, 0x65,
	0x57, 0x51, 0x6d, 0xfc, 0xe6, 0x41, 0x30, 0xb5, 0x68, 0xae, 0x12, 0xa4, 0x13, 0xe8, 0xcc, 0xd0,
	0xdc, 0x72, 0x83, 0xda, 0x94, 0x7d, 0x7c, 0x3d, 0x09, 0xb9, 0x3f, 0xd9, 0x3f, 0x25, 0xee, 0x4c,
	0x54, 0xa3, 0x13, 0x68, 0xcd, 0xb0, 0x4a, 0xf4, 0xce, 0xfd, 0xf2, 0x06, 0x9f, 0xe4, 0x60, 0xaa,
	0x54, 0x91, 0xa4, 0x92, 0x1b, 0xa4, 0x1f, 0x4e, 0x5c, 0xca, 0xc4, 0xde, 0x1f, 0x6f, 0xe5, 0xbb,
	0x87, 0xf6, 0xf7, 0x3d, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x7b, 0xc4, 0x9f, 0x7b, 0x02, 0x00, 0x00,
}
