// Code generated by protoc-gen-go.
// source: votechain.proto
// DO NOT EDIT!

/*
Package votechain is a generated protocol buffer package.

It is generated from these files:
	votechain.proto

It has these top-level messages:
	Empty
	Vote
	Result
	Block
	BlockNumber
*/
package votechain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Vote struct {
	VoterProof string `protobuf:"bytes,1,opt,name=voter_proof,json=voterProof" json:"voter_proof,omitempty"`
	RaceId     int32  `protobuf:"varint,2,opt,name=race_id,json=raceId" json:"race_id,omitempty"`
	Selection  string `protobuf:"bytes,3,opt,name=selection" json:"selection,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Vote) GetVoterProof() string {
	if m != nil {
		return m.VoterProof
	}
	return ""
}

func (m *Vote) GetRaceId() int32 {
	if m != nil {
		return m.RaceId
	}
	return 0
}

func (m *Vote) GetSelection() string {
	if m != nil {
		return m.Selection
	}
	return ""
}

type Result struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Block struct {
	Number   int32   `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Parent   string  `protobuf:"bytes,2,opt,name=parent" json:"parent,omitempty"`
	Nonce    int32   `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
	Hash     string  `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	Capacity int32   `protobuf:"varint,5,opt,name=capacity" json:"capacity,omitempty"`
	Votes    []*Vote `protobuf:"bytes,6,rep,name=votes" json:"votes,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Block) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Block) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Block) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Block) GetVotes() []*Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

type BlockNumber struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *BlockNumber) Reset()                    { *m = BlockNumber{} }
func (m *BlockNumber) String() string            { return proto.CompactTextString(m) }
func (*BlockNumber) ProtoMessage()               {}
func (*BlockNumber) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BlockNumber) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "votechain.Empty")
	proto.RegisterType((*Vote)(nil), "votechain.Vote")
	proto.RegisterType((*Result)(nil), "votechain.Result")
	proto.RegisterType((*Block)(nil), "votechain.Block")
	proto.RegisterType((*BlockNumber)(nil), "votechain.BlockNumber")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PollingStation service

type PollingStationClient interface {
	Cast(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*Result, error)
	GetLatestBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Block, error)
	GetBlock(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*Block, error)
	Mined(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Empty, error)
}

type pollingStationClient struct {
	cc *grpc.ClientConn
}

func NewPollingStationClient(cc *grpc.ClientConn) PollingStationClient {
	return &pollingStationClient{cc}
}

func (c *pollingStationClient) Cast(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/votechain.PollingStation/Cast", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollingStationClient) GetLatestBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/votechain.PollingStation/GetLatestBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollingStationClient) GetBlock(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/votechain.PollingStation/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollingStationClient) Mined(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/votechain.PollingStation/Mined", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PollingStation service

type PollingStationServer interface {
	Cast(context.Context, *Vote) (*Result, error)
	GetLatestBlock(context.Context, *Empty) (*Block, error)
	GetBlock(context.Context, *BlockNumber) (*Block, error)
	Mined(context.Context, *Block) (*Empty, error)
}

func RegisterPollingStationServer(s *grpc.Server, srv PollingStationServer) {
	s.RegisterService(&_PollingStation_serviceDesc, srv)
}

func _PollingStation_Cast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollingStationServer).Cast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votechain.PollingStation/Cast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollingStationServer).Cast(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollingStation_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollingStationServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votechain.PollingStation/GetLatestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollingStationServer).GetLatestBlock(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollingStation_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollingStationServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votechain.PollingStation/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollingStationServer).GetBlock(ctx, req.(*BlockNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollingStation_Mined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollingStationServer).Mined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votechain.PollingStation/Mined",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollingStationServer).Mined(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

var _PollingStation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "votechain.PollingStation",
	HandlerType: (*PollingStationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cast",
			Handler:    _PollingStation_Cast_Handler,
		},
		{
			MethodName: "GetLatestBlock",
			Handler:    _PollingStation_GetLatestBlock_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _PollingStation_GetBlock_Handler,
		},
		{
			MethodName: "Mined",
			Handler:    _PollingStation_Mined_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "votechain.proto",
}

// Client API for ChainNode service

type ChainNodeClient interface {
}

type chainNodeClient struct {
	cc *grpc.ClientConn
}

func NewChainNodeClient(cc *grpc.ClientConn) ChainNodeClient {
	return &chainNodeClient{cc}
}

// Server API for ChainNode service

type ChainNodeServer interface {
}

func RegisterChainNodeServer(s *grpc.Server, srv ChainNodeServer) {
	s.RegisterService(&_ChainNode_serviceDesc, srv)
}

var _ChainNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "votechain.ChainNode",
	HandlerType: (*ChainNodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "votechain.proto",
}

func init() { proto.RegisterFile("votechain.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x5d, 0x8b, 0xda, 0x40,
	0x14, 0x35, 0x35, 0x13, 0xcd, 0x0d, 0x68, 0x3b, 0x14, 0x1b, 0x42, 0xa1, 0x36, 0x50, 0xf0, 0xa1,
	0xf5, 0xc1, 0x42, 0x9f, 0xfa, 0x54, 0x29, 0x52, 0xe8, 0x8a, 0xcc, 0xc2, 0x3e, 0xae, 0x8c, 0x93,
	0xbb, 0x1a, 0x36, 0xce, 0x84, 0xcc, 0xb8, 0xe0, 0xff, 0xd9, 0xbf, 0xb5, 0xff, 0x65, 0x99, 0x49,
	0xfc, 0x40, 0xf7, 0x2d, 0xe7, 0x9c, 0x7b, 0xee, 0x3d, 0x9c, 0x0c, 0xf4, 0x9f, 0x94, 0x41, 0xb1,
	0xe1, 0xb9, 0x1c, 0x97, 0x95, 0x32, 0x8a, 0x86, 0x47, 0x22, 0xed, 0x00, 0xf9, 0xbb, 0x2d, 0xcd,
	0x3e, 0xbd, 0x07, 0xff, 0x4e, 0x19, 0xa4, 0x5f, 0x20, 0xb2, 0x6a, 0xb5, 0x2c, 0x2b, 0xa5, 0x1e,
	0x62, 0x6f, 0xe8, 0x8d, 0x42, 0x06, 0x8e, 0x5a, 0x58, 0x86, 0x7e, 0x82, 0x4e, 0xc5, 0x05, 0x2e,
	0xf3, 0x2c, 0x7e, 0x37, 0xf4, 0x46, 0x84, 0x05, 0x16, 0xfe, 0xcb, 0xe8, 0x67, 0x08, 0x35, 0x16,
	0x28, 0x4c, 0xae, 0x64, 0xdc, 0x76, 0xbe, 0x13, 0x91, 0xfe, 0x86, 0x80, 0xa1, 0xde, 0x15, 0x86,
	0xc6, 0xd0, 0xd1, 0x3b, 0x21, 0x50, 0x6b, 0xb7, 0xbd, 0xcb, 0x0e, 0xd0, 0x2a, 0x5b, 0xd4, 0x9a,
	0xaf, 0xd1, 0xad, 0x0e, 0xd9, 0x01, 0xa6, 0xcf, 0x1e, 0x90, 0x3f, 0x85, 0x12, 0x8f, 0x74, 0x00,
	0x81, 0xdc, 0x6d, 0x57, 0x58, 0x39, 0x33, 0x61, 0x0d, 0xb2, 0x7c, 0xc9, 0x2b, 0x94, 0xa6, 0xb1,
	0x36, 0x88, 0x7e, 0x04, 0x22, 0x95, 0x14, 0xe8, 0x12, 0x11, 0x56, 0x03, 0x4a, 0xc1, 0xdf, 0x70,
	0xbd, 0x89, 0x7d, 0x37, 0xeb, 0xbe, 0x69, 0x02, 0x5d, 0xc1, 0x4b, 0x2e, 0x72, 0xb3, 0x8f, 0x89,
	0x1b, 0x3e, 0x62, 0xfa, 0x0d, 0x88, 0xad, 0x40, 0xc7, 0xc1, 0xb0, 0x3d, 0x8a, 0x26, 0xfd, 0xf1,
	0xa9, 0x52, 0xdb, 0x1a, 0xab, 0xd5, 0xf4, 0x2b, 0x44, 0x2e, 0xe5, 0xbc, 0xce, 0x74, 0xb8, 0xe2,
	0x9d, 0xae, 0x4c, 0x5e, 0x3c, 0xe8, 0x2d, 0x54, 0x51, 0xe4, 0x72, 0x7d, 0x6b, 0xb8, 0xad, 0x86,
	0x7e, 0x07, 0x7f, 0xca, 0xb5, 0xa1, 0x97, 0x5b, 0x93, 0x0f, 0x67, 0x44, 0x5d, 0x5e, 0xda, 0xa2,
	0xbf, 0xa0, 0x37, 0x43, 0xf3, 0x9f, 0x1b, 0xd4, 0xa6, 0xae, 0xe4, 0xfd, 0xd9, 0x98, 0xfb, 0x99,
	0xc9, 0x39, 0xe3, 0x66, 0x9c, 0xaf, 0x3b, 0xc3, 0xc6, 0x31, 0xb8, 0xd4, 0xeb, 0xc0, 0x6f, 0xfa,
	0x7e, 0x00, 0xb9, 0xc9, 0x25, 0x66, 0xf4, 0x4a, 0x4c, 0xae, 0x0e, 0xa7, 0xad, 0x49, 0x04, 0xe1,
	0xd4, 0x12, 0x73, 0x95, 0xe1, 0x2a, 0x70, 0xef, 0xed, 0xe7, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf3, 0x49, 0xe0, 0x08, 0x82, 0x02, 0x00, 0x00,
}
